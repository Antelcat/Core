<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Reflection.Emit" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#
	var except = new List<string>() {  
		"MarkSequencePoint"  
	};
	var methods = typeof(System.Reflection.Emit.ILGenerator)
		.GetMethods(BindingFlags.Instance | BindingFlags.Public)
		.Where(x => x.ReturnType == typeof(void))
		.Where(x => !except.Contains(x.Name));
	
	string PrintParam(ParameterInfo[] paramInfo) => 
		paramInfo.Length == 0 
			? "this ILGenerator il"
			: paramInfo
				.Select(x => $"{x.ParameterType.Name} {x.Name}")
				.Aggregate("this ILGenerator il", (s, c) => $"{s}, {c}");

	string PrintCall(ParameterInfo[] paramInfo) => 
		paramInfo.Length == 0 
			? string.Empty 
			: paramInfo
				.Select(x => $"{x.Name}")
				.Aggregate(string.Empty, (s, c) => $"{s}, {c}")
				.Substring(2);
#>
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

namespace <#=System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint").ToString()#>;

public static partial class ILExtension
{
<# 
foreach(var method in methods)
{
	var param = method.GetParameters();
#>
	public static ILGenerator <#=method.Name#>Ex(<#=PrintParam(param)#>)
	{
		il.<#=method.Name#>(<#=PrintCall(param)#>);
		return il;
	}

<#
}
#>
}